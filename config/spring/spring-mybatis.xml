<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
 
 <!-- mybatis的数据源交给spring的ioc容器来创建 -->
 <!-- 读取工程下面的properties文件 -->
 <context:property-placeholder location="classpath:jdbc/jdbc.properties" />
 
 <!-- 配置mybatis的数据源 使用的是dbcp数据库连接池 
 常用的数据库连接池 c3p0 dbcp  druid  
 -->
 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
<!-- sqlSessinFactory在mybatis单独使用的时候
	咱们封装了一个工具类来获取该单例，但是和spring整合之后
	完全交给spring的ioc容器来实例化该对象
	-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 映射文件位置 -->
		<property name="mapperLocations" value="classpath:com/bkd/edu/mapper/*.xml"></property>
	</bean>	
	
	<!-- mybatis-spring-1.3.0.jar,提供了
	自动生成mapper代理对象的机制，
	只需要配置mapper接口的包路径
	和sqlsessionfactory
	spring的mapperscan用来扫描mapper接口，帮咱们创建mapper接口的动态代理对象
	-->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bkd.edu.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<!-- 配置spring的注解扫描器，注意 不扫描controller注解 -->
	<context:component-scan base-package="com.bkd.edu">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 后面会整合到spring的事务管理器 
	事务是数据库提供的机制，用来保障多个操作在一个事务范围内，要不全部成功，要不全部失败
	比如银行转账 :甲方向乙方转账100
	1：通过sql a:让甲方的账户减少100元钱
	2:通过sql b:让乙方的账户增加100元钱
	由于这种特殊的场景，必须得保证 a b两个sql同时成功，要不就同时失败
	a  b 有一条sql语句运行失败了，必须得回滚.
	spring提供了事务管理器，用来管理数据库的事务,通过aop来进行控制
	-->
	<!-- 1:创建一个事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 2:配置事务的传播特性 -->
		<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS"
				read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	 <!--3: 设置aop的切面  注意设置在service实现类这一级别-->
	 <aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.bkd.edu.service.impl.*.*(..))" />
	</aop:config>
	
	
	<!-- 邮件发送相关的配置 -->
	<!-- 使用Spring封装的Mail Sender -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.sina.com" />
		<property name="username" value="cxdaao@sina.com" />
		<property name="password" value="Chen980657" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>
	
 </beans>
